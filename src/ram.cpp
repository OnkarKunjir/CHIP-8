#define __FILENAME__ "RAM"

#include "ram.hpp"
#include "utils/log.hpp"

#include <cstdio>
#include <fstream>

Ram::Ram() { reset(); }

void Ram::reset() {
  unsigned char default_sprite[] = {
      // low resolution sprite.
      0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70, 0xF0, 0x10,
      0xF0, 0x80, 0xF0, 0xF0, 0x10, 0xF0, 0x10, 0xF0, 0x90, 0x90, 0xF0, 0x10,
      0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80, 0xF0, 0x90, 0xF0, 0xF0,
      0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0,
      0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0,
      0xF0, 0x80, 0x80, 0x80, 0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80,
      0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80,

      // high resolution sprite.
      0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C, 0x18, 0x38,
      0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x3E, 0x7F, 0xC3, 0x06,
      0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF, 0x3C, 0x7E, 0xC3, 0x03, 0x0E, 0x0E,
      0x03, 0xC3, 0x7E, 0x3C, 0x06, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xFF, 0xFF,
      0x06, 0x06, 0xFF, 0xFF, 0xC0, 0xC0, 0xFC, 0xFE, 0x03, 0xC3, 0x7E, 0x3C,
      0x3E, 0x7C, 0xC0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0x7E, 0x3C, 0xFF, 0xFF,
      0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x60, 0x3C, 0x7E, 0xC3, 0xC3,
      0x7E, 0x7E, 0xC3, 0xC3, 0x7E, 0x3C, 0x3C, 0x7E, 0xC3, 0xC3, 0x7F, 0x3F,
      0x03, 0x03, 0x3E, 0x7C};

  for (int i = 0; i < RAM_SIZE; i++)
    _ram[i] = 0;

  for (int i = 0; i < sizeof(default_sprite); i++)
    _ram[i] = default_sprite[i];
}

unsigned char &Ram::operator[](int n) {
  if (n < 0 || n > RAM_SIZE)
    Log::error(__FILENAME__, "Invalid address");
  return _ram[n];
}

const unsigned char &Ram::operator[](int n) const {
  if (n < 0 || n > RAM_SIZE)
    Log::error(__FILENAME__, "Invalid address");
  return _ram[n];
}

int Ram::sprite_location(unsigned char sprite, bool high_res) const {
  if (high_res)
    return sprite * 10 + 80;
  return sprite * 5;
}

int Ram::load(const std::string &path) {
  std::fstream rom(path, std::ios::in);

  if (!rom.is_open())
    Log::error(__FILENAME__, "Failed to load rom: " + path);

  rom.seekg(std::ios::beg, std::ios::end);
  _rom_size = rom.tellg();
  rom.seekg(std::ios::beg, std::ios::beg);
  Log::warn("ROM SIZE", std::to_string(_rom_size));

  rom.read((char *)_ram + OFFSET, _rom_size);

  rom.close();
  return OFFSET;
}

void Ram::dump() const {
  for (int i = OFFSET; i < OFFSET + _rom_size - 1; i += 2) {
    printf("%03X | %02x %02x\n", i, _ram[i], _ram[i + 1]);
  }
}
